version: 2.1
orbs:
  # orgs contain basc recipes and reproducible actions (install node, aws, etc.)
  node: circleci/node@5.0.2
  eb: circleci/aws-elastic-beanstalk@2.0.1
  aws-cli: circleci/aws-cli@3.1.1
  # different jobs are calles later in the workflows sections
jobs:
  build:
    docker:
      # the base image can run most needed actions with orbs
      - image: "cimg/node:23.1"
    steps:
      # install node and checkout code
      - node/install:
          node-version: "23.1"
      - checkout
      # Use root level package.json to install dependencies in the frontend app
      - run:
          name: Install Front-End Dependencies
          command: |
            npm run frontend:install
      # TODO: Install dependencies in the the backend API
      - run:
          name: Install API Dependencies
          command: |
            npm run api:install
      # TODO: Build the frontend app
      - run:
          name: Front-End Build
          command: |
            npm run frontend:build
      # TODO: Build the backend API
      - run:
          name: API Build
          command: |
            npm run api:build
  # deploy step will run only after manual approval
  deploy:
    docker:
      - image: "cimg/base:stable"
      # more setup needed for aws, node, elastic beanstalk
    environment:
      AWS_ACCESS_KEY_ID: "ASIATTUUI2UJUCQISNED"
      AWS_BUCKET: "arn:aws:s3:::mybucket248345318675"
      AWS_PROFILE: "default"
      AWS_REGION: "us-east-1"
      AWS_SECRET_ACCESS_KEY: "qugrPAQLYHmRRlsNkb0Qa/QcArnruAM/mSr9tHnW"
      JWT_SECRET: "mysecretstring"
      POSTGRES_DB: "postgres"
      POSTGRES_HOST: "postgres.ct7crkwktzwy.us-east-1.rds.amazonaws.com"
      POSTGRES_PASSWORD: "Password12345-Key123"
      POSTGRES_USERNAME: "postgres"
    steps:
      - node/install:
          node-version: "23.1"
      - eb/setup
      - aws-cli/setup
      - checkout
      - run:
          name: Deploy Back-End
          # Setup eb
            eb setenv AWS_ACCESS_KEY_ID = $AWS_ACCESS_KEY_ID AWS_BUCKET = $AWS_BUCKET AWS_PROFILE = $AWS_PROFILE AWS_REGION = $AWS_REGION AWS_SECRET_ACCESS_KEY = $AWS_SECRET_ACCESS_KEY JWT_SECRET = $JWT_SECRET POSTGRES_DB = $POSTGRES_DB POSTGRES_HOST = $POSTGRES_HOST POSTGRES_PASSWORD = $POSTGRES_PASSWORD POSTGRES_USERNAME = $POSTGRES_USERNAME
          # TODO: Install, build, deploy in both apps
          command: |
            npm run api:deploy
      - run:
          name: Deploy Front-End
          # TODO: Install, build, deploy in both apps
          command: |
            npm run frontend:deploy

workflows:
  udagram:
    jobs:
      - build
      - hold:
          filters:
            branches:
              only:
                - master
          type: approval
          requires:
            - build
      - deploy:
          requires:
            - hold
